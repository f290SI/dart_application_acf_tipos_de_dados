import 'dart:io';

/// Fun√ß√£o de inicializacao da aplica√ß√£o, √© o gatilho do projeto.

/**
 * Tamb√©m √© um comentario de fun√ß√£o para documenta√ß√£o
 */
void main(List<String> arguments) {
  //TODO: Coment√°rios

  // Comentario de linha √∫nica

  /*
    Comnet√°rios de multiplas linhas
    Mais um comentario
    Mais uma linha
  */

  //TODO: Sa√≠da de dados
  print('Hello world!');

  /*
    A interpola√ß√£o de String em Dart √© feita utilizando-se o $ como prefixo de
    identificador desta forma $identificador ou ${expressao} desta forma ${obj.someMethod()}
    Abaixo teremos alguns exemplos.
  */

  //TODO: Declarar tipadas.
  int year = 2016;
  String bestStarWarsMovie = 'Rogue One - A Star Wars History';
  double tomatometer = 0.84;
  print(
      'Meu filme favorito √© $bestStarWarsMovie ele teve $tomatometer de aprova√ß√£o e foi lan√ßado em $year');
  print('\u{1F3AF} √© √≥timo para criar üì±');

  //TODO: Declarar variaveis por inferencia
  var lang = 'Dart';
  var version = Platform.version;
  num androidSdk = 30.1;
  num flutterSdk = 3;

  print('\nlang is ${lang.runtimeType}');
  print('version is ${version.runtimeType}');
  print('androidSdk is ${androidSdk.runtimeType}');
  print('flutterSdk is ${flutterSdk.runtimeType}');

  //TODO: Declarar variaveis dinamicas
  dynamic value = 10;
  print('\nDynamics\nvalue: $value is ${value.runtimeType}');
  value = 10.765;
  print('\nvalue is ${value.runtimeType}');
  value = '10.765';
  print('\nvalue is ${value.runtimeType}');
  value = false;
  print('\nvalue is ${value.runtimeType}');
  value = [1, 2, 3, 4, 5];
  print('\nvalue is ${value.runtimeType}');

  value = {'lang': 'Dart', 'version': version};
  print('\nvalue is ${value.runtimeType}');

  //TODO: Declarar constantes
  /* O modificador const √© para declarar valores imut√°veis 
  que podem ser definidos antecipadamente pelo compilador.  
  */
  const framework = 'Flutter';

  /* O modificador final √© para declarar valores imut√°veis 
  que ser√£o conhecidos apenas em tempo de execu√ß√£o pelo compilador.  
  Por exemplo o valor da hora atual, n√£o se pode antecipar por que 
  ser√° atribuido apenas na execu√ß√£o da aplica√ß√£o.

  A declara√ß√£o de constHoraAtual abaixo ir√° falhar. Descomente-a.
  */

  // Descomente para testar a falha do const na defini√ß√£o da hora local
  //const horaAtual = DateTime.now();
  final horaAtual = DateTime.now();

  //TODO: Testar metodos dos tipos em Dart. Evething is Object!

  var a = 11;
  var treinamento = 'Acelera√ß√£o Flutter';
  print('$a √© √≠mpar? ${a.isOdd ? 'SIM' : 'N√ÉO'}');
  print(
      '\nTreinamento: ${treinamento.toUpperCase().replaceFirst('FLUTTER', 'F.L.U.T.T.E.R')}');

  //TODO: Collections

  /*
  Uma Lista √© uma estrutura de dados que √© prativamente um Array, uma cole√ß√£o de vari√°veis 
  que compartilha o mesmo nome e seus conte√∫dos s√£o individualizados pelo √≠ndice de cada vari√°vel,
  ou seja o √≠ndice √© que as diferenciam, s√£o tamb√©m conhecidas como vari√°veis indexadas unidimensionais.
  */

  print("\n\nListas");

  // Declara√ß√£o tipada
  List<int> listaTipada = [6, 7, 8, 4, 3, 5];

  // Declara√ß√£o por inferencia
  var listaInferencia = [6, 7, 8, 4, 3, 5];

  print(listaTipada);

  //Acesso √† um elemento com refencia ao √≠ndice
  print(listaInferencia[1]);

  // Percorrer os itens de uma lista
  for (var item in listaInferencia) {
    print(item);
  }

  print('\nMaps');

  /* Maps s√£o como arrays, por√©m ao inv√©s de utilizar indices num√©ricos, utiliza-se chaves.
    Maps s√£o cole√ß√µes que utilizam o conceito de chave:valor para identificar seus elementos.
  */
  var mapa = {'SP': 'S√£o Paulo', 'CE': 'Cear√°', 'AM': 'Amazonas'};

  //Percorres um map em Dart, no caso abaixo, a sigla seria a chave e o estado seria o valor
  mapa.forEach((sigla, estado) => print('$sigla: $estado'));
  print('\n\n');

  // Set √© uma cole√ß√£o especial que n√£o permite valores duplicados como as Listas. S√£o super r√°pidas em consultas!
  var setFilmes = <String>{
    'Episodio I - A amea√ßa fanstasma',
    'Episodio II - O Ataque dos Clones',
    'Episodio III - A Vingan√ßa dos Sith'
  };

  // Inclusao de filme repetido ao Set
  setFilmes.add('Episodio II - O Ataque dos Clones');

  // Valida√ß√£o do Set de filmes: O filme duplicado n√£o foi adicionado
  print(setFilmes);

  // Cria√ß√£o de lista a partir do Set de filmes
  var listFilmes = setFilmes.map((f) => f).toList();

  // Inclusao de filme repetido √† Lista
  listFilmes.add('Episodio II - O Ataque dos Clones');

  // Valida√ß√£o da Lista de filmes: O filme duplicado foi adicionado
  print(listFilmes);

  //TODO: Nos vemos na pr√≥xima aula!!
}
